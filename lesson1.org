#+TITLE: Intro to Databases
#+DATE: 24 September 2018
#+TEACHER: Albert BIFFET
#+INCLUDE: "../print/doctype-memo.org"
{{{subtitle(Memo Template)}}}
{{{theme-color(0060c1)}}}

* Introduction
 
- Cardinality = number of rows
- Degree = number of columns

* Relational algebra

** Sets

- Union: $A \cup B$
- Intersection: $A \cap B$
- Relative complement: $A - B$
- Synthetic complement: $A \Delta B = (A - B) \cup (B - A)$
- Cartesian product: $A \times B$

** Projection ($\pi$)
   
Roughly, this operation consists in picking a subset of all available columns.

$\Pi_{a_1, ..., a_n}(R)$ where $\{a_1, ..., a_n\}$ is a set of attribute names.
   
[1] https://en.wikipedia.org/wiki/Projection_(relational_algebra)

** Selection ($\sigma$)
   
Denotes /subset/ of a relation.

$\sigma_{a\theta b}(R)$ where:
- $a$ and $b$ are attribute names
- $\theta$ is a binary operation
- $R$ is a relation

[1] https://en.wikipedia.org/wiki/Selection_(relational_algebra)

** Rename ($\rho$)
   
$\rho_{a/b}(R)$ where:
- $R$ is a relation
- $a$ and $b$ are attribute names
- $b$ is an attribute of $R$

[1] https://en.wikipedia.org/wiki/Rename_(relational_algebra)


** Cartesian product
   
Allows us to combine 2 relations.

#+CAPTION: Cartesian product table
| ID | Name  | Age | UserID | Friend | Date |
|----+-------+-----+--------+--------+------|
|  1 | Marc  |  20 |      1 |      2 | 5/6  |
|  2 | Paul  |  25 |      1 |      2 | 5/6  |
|  3 | Frank |  20 |      1 |      2 | 5/6  |
|  1 | Marc  |  20 |      2 |      3 | 4/6  |
|  2 | Paul  |  25 |      2 |      3 | 4/6  |
|  3 | Frank |  20 |      2 |      3 | 4/6  |
|  1 | Marc  |  20 |      1 |      3 | 7/6  |
|  2 | Paul  |  25 |      1 |      3 | 7/6  |
|  3 | Frank |  20 |      1 |      3 | 7/6  |
   
** Natural join   
   
Allows to join 2 tables that have a matching key.

** Theta join
   
Allows to join with such that a condition is met on the columns to join (column 1 from table A >= column 7 of table B).

$U = \mbox{users}; F = \mbox{friends}: U \bowtie_\theta F = \bigtriangledown_\theta (U \times F)$

[1] https://en.wikipedia.org/wiki/Relational_algebra#%CE%B8-join_and_equijoin

** Rename

$\rho_{\mbox{username / Name}}(\mbox{Harvard Users})$

** Division
   
#+CAPTION: Table A
| Student | Professor |
|---------+-----------|
| Jean    | Smith     |
| Serge   | Jones     |
| Aubert  | Smith     |
| Jean    | Jones     |
| Jean    | Doe       |
 
#+CAPTION: Table B
| Professor |
|-----------|
| Smith     |
| Jones     |

List of student who attended courses with professors.

- $\mbox{answer} = \mbox{Jean} = A \div B$
- $\mbox{answer} \times B \subset C$

List of students who do not attend the courses with professors Smith and Jones.

- answer: $\Pi_{\mbox{Students}}(A) - \Pi_{\mbox{Students}}(X)$

** Examples
   
Operations:

#+CAPTION: Harvard users
| ID | Name  | Age |
|----+-------+-----|
|  1 | Marc  |  20 |
|  2 | Paul  |  25 |
|  3 | Frank |  30 |

#+CAPTION: Stanford users
| ID | Name | Age |
|----+------+-----|
|  1 | Marc |  30 |
|  2 | Jean |  55 |
|  3 | Paul |  19 |

#+CAPTION: Friends
| ID | Friend_ID | Date |
|----+-----------+------|
|  1 | Marc      | 5/6  |
|  2 | Paul      | 6/8  |
|  3 | Frank     | 8/6  |

- List of names of Harvard users: $\Pi_{\mbox{Name}}$
- List of users of Harvard with $\mbox{Age} > 22$: $\sigma_{\mbox{age} > 22}$
- List of users of Harvard or Stanford: $\mbox{Harvard users} \cup \mbox{Standord users}$
- List of users of Harvard and Stanford: $A \cap B = A \cup B - A \Delta B$

* Formal relational query languages

- Relational Algebra
- Relational Calculus

* Exercises

** Question 1

Find names of sailors who've reserved boat #103

*Solution 1:*

1. join Reserves and Sailors by sid
2. Retrieve the boat #103 line using a Selection
3. Select name column using a projection

$\Pi_{\mbox(name) } [\sigma_{\mbox{bid} = 103} (\mbox{reserves} \bowtie \mbox{Sailors} ) ]$

*Solution 2:*

$\Pi_{\mbox(name) } [(\sigma_{\mbox{bid} = 103} \mbox{reserves})  \bowtie \mbox{Sailors} ]$

Solution 2 is much more performant however, since the cross product doesn't act on all rows.

** Question 2

Find the names of the sailors who reserved a red boat:

*Solution:*

** Question 3

Find sailors who've reserved a green boat

*Solution:*

** Question 4

 Find the names of sailors who've reserved __ boat

*Solution:*
